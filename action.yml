name: Test and deploy schema files

inputs:
  github-ref:
    description: The GitHub branch reference
    required: true
  repository-name:
    description: The GitHub repository name
    required: true
  access-token:
    description: Cross repo access token
    required: true
  changed-files:
    description: Changed files in PR
    required: true

runs:
  using: composite

  steps:
    - name: Configure Git user
      run: |
        git config user.name "RasentBot"
        git config user.email "scripts-bot@rasentsolutions.com"
      shell: bash 

    - name: Merge main into PR branch
      run: |
        if git merge --no-ff main; then
          echo "Merge main into PR branch"
        fi
      shell: bash
      
    - name: Checkout scripts repo
      uses: actions/checkout@v2
      with:
        repository: california-energy-commission/scripts
        path: scripts
        token: ${{ inputs.access-token }}

    - name: Checking schema well-formedness
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/lint_schema.py schema
        fi
      shell: bash

    - name: Checking empty schema sections
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/empty_sections.py schema
        fi
      shell: bash

    - name: Checking responsible person sections
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/responsible_person.py schema
        fi
      shell: bash

    - name: Checking d:list inside d:list
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/d_list_markup.py schema
        fi
      shell: bash

    - name: Checking missing schema sections
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/missing_sections.py schema
        fi
      shell: bash

    - name: Checking for mismatched Header
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/header.py schema
        fi
      shell: bash

    - name: Checking for missing base elements
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/missing_base_elements.py schema
        fi
      shell: bash

    - name: Checking for missing namespace declarations
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 scripts/schema/namespace_prefixes.py schema
        fi
      shell: bash

    - name: Running deploy-schema script
      run: |
        chmod a+x scripts/deploy/deploy-schema-linux-amd64
        for file in ${{ inputs.all_changed_files }}; do
          echo "$file was changed"
        done
        if [ ${{ inputs.repository-name }} = *"Schema"* ]; then          
          ./scripts/deploy/deploy-schema-linux-amd64 -d deployed -s schema }}
        fi
      shell: bash

    - name: Upload deployed schema folder
      uses: actions/upload-artifact@master
      with:
        name: ${{ inputs.repository-name }}-deployed
        path: deployed

    - name: Checkout current repository
      uses: actions/checkout@v2

    - name: Checking stylesheet well-formedness
      run: |
        if [[ ${{ inputs.repository-name }} == *"Stylesheet"* ]]; then
          python3 scripts/stylesheet/lint_stylesheet.py stylesheet
        fi
      shell: bash

    - name: Run xslt transformation
      run: |
        if [[ ${{ inputs.repository-name }} == *"Stylesheet"* ]]; then
          python3 scripts/stylesheet/run_transformation.py stylesheet/CF2R/CF2RMCH01bE.xsl test/herinson/xml/CF2RMCH01bE1.xml
        fi
      shell: bash

    - name: Update submodule
      run: |
        if [[ ${{ inputs.repository-name }} == *"Stylesheet"* ]]; then
          git status  
          git submodule update --init --remote
          git add .
          echo "PR branch is ${{ inputs.github-ref }}" 
          if git commit -S -m "Update submodule"; then
            git push origin ${{ inputs.github-ref }}
          fi
        fi
      shell: bash

    - name: Download deployed schema folder
      uses: actions/download-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-deployed
        path: deployed

    - name: Commit to PR
      run: |
        git status
        git add .
        echo "PR branch is ${{ inputs.github-ref }}" 
        if git commit -S -m "Run deploy-schema script"; then
          git push origin ${{ inputs.github-ref }}
        fi
      shell: bash