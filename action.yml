name: Test and deploy schema files

inputs:
  github-ref:
    description: The GitHub branch reference
    required: true
  repository-name:
    description: The GitHub repository name
    required: true
  access-token:
    description: Cross repo access token
    required: true
  repository-owner:
    description: The GitHub repository owner
    required: true
 
runs:
  using: composite

  steps:
    - name: Configure workspace
      run: |
        sudo apt-get install python3-lxml
        git config --global user.email "scripts-bot@rasentsolutions.com"
        git config --global user.name "Rasent Bot"
      shell: bash

    - name: Checkout Scripts repo
      uses: actions/checkout@v3
      with:
        repository: california-energy-commission/Scripts
        path: Scripts
        token: ${{ inputs.access-token }}

    - name: Checkout target repo
      uses: actions/checkout@v3
      with:
        repository:  ${{ inputs.repository-owner }}/${{ inputs.repository-name }}
        path: ${{ inputs.repository-name }}
        token: ${{ inputs.access-token }}
        submodules: true

    - name: Checking schema well-formedness
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/lint_schema.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking empty schema sections
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/empty_sections.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking responsible person sections
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/responsible_person.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking d:list inside d:list
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/d_list_markup.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    #- name: Checking missing schema sections
    #  run: |
    #    if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
    #      python3 Scripts/schema/missing_sections.py ${{ inputs.repository-name }}/schema
    #    fi
    #  shell: bash

    - name: Checking for mismatched Header
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/header.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking for missing base elements
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/missing_base_elements.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking for missing namespace declarations
      run: |
        if [[ ${{ inputs.repository-name }} == *"Schema"* ]]; then
          python3 Scripts/schema/namespace_prefixes.py ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Running deploy-schema script
      run: |
        chmod a+x Scripts/deploy/deploy-schema-linux-amd64
        for file in ${{ inputs.all_changed_files }}; do
          echo "$file was changed"
        done
        if [ ${{ inputs.repository-name }} = *"Schema"* ]; then          
          Scripts/deploy/deploy-schema-linux-amd64 -d ${{ inputs.repository-name }}/deployed -s ${{ inputs.repository-name }}/schema
        fi
      shell: bash

    - name: Checking stylesheet well-formedness
      run: |
        if [[ ${{ inputs.repository-name }} == *"Stylesheet"* || ${{ inputs.repository-name }} == *"Development"* ]]; then
          python3 Scripts/stylesheet/lint_stylesheet.py ${{ inputs.repository-name }}/stylesheet
        fi
      shell: bash

    #- name: Run xslt transformation
    #  run: |
    #    if [[ ${{ inputs.repository-name }} == *"Stylesheet"* || ${{ inputs.repository-name }} == *"Development"* ]]; then
    #      python3 Scripts/stylesheet/run_transformation.py ${{ inputs.repository-name }}/stylesheet/CF2R/CF2RMCH01bE.xsl ${{ inputs.repository-name }}/test/herinson/xml/CF2RMCH01bE1.xml
    #    fi
    #  shell: bash

    - name: Update submodule
      run: |
        if [[ ${{ inputs.repository-name }} == *"Stylesheet"* || ${{ inputs.repository-name }} == *"Development"* ]]; then
          cd ${{ inputs.repository-name }}
          git status  
          git submodule update --init --remote
          git add .
          if git commit -m "Update submodule"; then
            git push
          fi
        fi
      shell: bash

    - name: Commit to PR
      run: |
        cd ${{ inputs.repository-name }}
        git status
        git add .
        if git commit -m "Run deploy-schema script"; then
          git push 
        fi
      shell: bash

    - name: Dispatch to Scripts repo
      uses: mvasigh/dispatch-action@main
      with:
        token: ${{ inputs.access-token }}
        repo: ${{ inputs.repository-name }}
        owner: ${{ inputs.repository-owner }}
        event_type: scripts-response
        message: |
          {
            "stylesheet": "success",
            "schema": "success"
          }
